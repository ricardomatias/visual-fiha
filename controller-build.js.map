{"version":3,"sources":["webpack:///./controller-app.js"],"names":[],"mappings":";;;;;;AAAA;;AAEA,wBAKA;AACA,mDAGA;AACA,mDAEA;AACA,wBAOA;AACA,kEAEA;AACA,mDAUA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,+DAA+D,GAAG,cAAc;AAC5H;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA,kDAAkD;AAClD;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,mEAAmE;;AAEnE;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA,GAAG;;AAEH;AACA,2DAA2D,iCAAiC;AAC5F;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;AAKD;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;;;;AAID;AACA,CAAC;AACD,CAAC;AACD,CAAC;AACD,CAAC;AACD,CAAC;AACD,CAAC,iE","file":"controller-build.js","sourcesContent":["'use strict';\n\nrequire.ensure([\n  'ramda',\n  'lodash.assign',\n  'ampersand-state',\n  'ampersand-collection'\n], function() {\nrequire.ensure([\n  'ampersand-view',\n  'ampersand-view-switcher'\n], function() {\nrequire.ensure([\n  './mapping/data',\n], function() {\nrequire.ensure([\n  './layer/state',\n  './layer/svg/state',\n  './layer/img/state',\n  './layer/txt/state',\n  './layer/video/state',\n  './layer/canvas/state',\n], function() {\nrequire.ensure([\n  './screen/state',\n], function() {\nrequire.ensure([\n  './controller/settings',\n  './storage',\n  './layer/canvas/scripts',\n  './midi/state',\n  './midi/view',\n  './signal/control-view',\n  './signal/beat/control-view',\n  './signal/hsla/control-view',\n  './signal/rgba/control-view'\n], function(require) {\n// ---------------------------------------------------------------\n\n\n\n// almost unique id\nfunction auid() {\n  return parseInt((Math.random() + '.' + performance.now()).replace(/\\./g, ''), 10);\n}\nvar LoadedWorker = require('worker-loader?name=worker-build.js!./web-worker.js');\nvar ControllerView = require('./controller/view');\nvar ScreenState = require('./screen/state');\nvar MIDIAccessState = require('./midi/state');\nvar Mappings = require('./mapping/data');\n\n\nvar DetailsView = require('./layer/details-view');\nvar Settings = require('./controller/settings');\n\nvar SignalCollection = require('./signal/collection');\n\nvar signals = new SignalCollection([]);\n\nvar VF = window.VF || {};\nVF.setups = VF.setups || {};\n\n// var _executedCommands = [];\n\nvar AppRouter = require('ampersand-router').extend({\n  _workerInit: false,\n\n  _handleBroadcastMessages: function(evt) {\n    var router = this;\n    var screen = router.model;\n    var command = evt.data.command;\n    var payload = evt.data.payload || {};\n    // logger.info('app incoming broadcast command \"%s\"', command);\n\n    switch (command) {\n      case 'bootstrap':\n        screen.layers.reset(payload.layers || []);\n        signals.reset(payload.signals || []);\n        router.mappings.import(payload.mappings || [], true);\n        break;\n\n      case 'updateLayer':\n        screen.layers.get(payload.layer.name).set(payload.layer);\n        break;\n\n      case 'addLayer':\n        screen.layers.add(payload.layer);\n        var model = screen.layers.get(payload.layer.name);\n        router.view.showDetails(new DetailsView({\n          parent: router.view.layersView,\n          model: model\n        }));\n        break;\n\n      case 'updateLayers':\n        var ft = payload.frametime || 0;\n        signals.trigger('frametime', ft);\n        screen.layers.trigger('frametime', ft);\n        screen.layers.set(payload.layers);\n        break;\n\n      default:\n        console.info('unrecognized broadcast command \"%s\"', command);\n    }\n    router.trigger('app:broadcast:' + command, payload);\n  },\n\n  _handleWorkerMessages: function(evt) {\n    var router = this;\n    var screen = router.model;\n    var command = evt.data.command;\n    var payload = evt.data.payload || {};\n    // logger.info('app incoming worker command \"%s\"', command);\n\n    switch (command) {\n      case 'health':\n        router.view.workerPerformance = `~${ ((payload.samplesCount / payload.elapsed) * 1000).toFixed(2) }/${ payload.fps }fps`;\n        break;\n\n      case 'updateLayer':\n        var layerState = screen.layers.get(payload.layer.name);\n        if(layerState) {\n          layerState.set(payload.layer);\n        }\n        else {\n          screen.layers.add(payload.layer);\n        }\n        break;\n\n      case 'addSignal':\n        signals.add(payload.signal);\n        router.view.showDetails(new DetailsView({\n          parent: router.view.signalsView,\n          model: signals.get(payload.signal.name)\n        }));\n        break;\n      case 'updateSignal':\n        var signalState = signals.get(payload.signal.name);\n        if (signalState) {\n          signalState.set(payload.signal);\n        }\n        break;\n      case 'updateSignals':\n        signals.set(payload.signals);\n        break;\n      case 'removeSignal':\n        signals.remove(payload.name);\n        break;\n\n      case 'addMapping':\n        router.mappings.add(payload.mapping);\n        break;\n      case 'updateMapping':\n        var mappingState = router.mappings.get(payload.mapping.name);\n        if (mappingState) {\n          mappingState.set(payload.mapping);\n          mappingState.trigger('change:targets');\n        }\n        break;\n      case 'removeMapping':\n        router.mappings.remove(payload.name);\n        break;\n\n      case 'timelineCommands':\n        router.view.timeline.addEntries(payload.commands);\n        break;\n\n      default:\n        console.info('unrecognized worker command \"%s\"', command);\n    }\n    router.trigger('app:worker:' + command, payload);\n  },\n\n  initialize: function(options) {\n    var router = this;\n\n    router.worker = new LoadedWorker();\n    router.settings = new Settings('vf');\n\n    var screen = router.model = new ScreenState({}, {\n      router: this\n    });\n\n    var mappingContext = {\n      context: {\n        signals: signals,\n        layers: screen.layers\n      }\n    };\n    router.mappings = new Mappings([], mappingContext);\n\n    router.broadcastChannel = new BroadcastChannel('spike');\n\n    router.broadcastChannel.addEventListener('message', this._handleBroadcastMessages.bind(this));\n\n    router.worker.addEventListener('message', this._handleWorkerMessages.bind(this));\n\n    var midi = router.midi = (router.midi || new MIDIAccessState({}));\n\n    midi.on('midi:change', function(deviceName, property, velocity) {\n      router.sendCommand('midi', {\n        deviceName: deviceName,\n        property: property,\n        velocity: velocity\n      });\n    });\n\n    router.listenTo(midi, 'change:inputs', function() {\n      var _mappings = router.mappings.length ? router.mappings.export() : options.mappings || [];\n      if (!_mappings.length) return;\n      router.sendCommand('resetMappings', {\n        mappings: _mappings\n      });\n    });\n\n    router.view = new ControllerView({\n      midi: midi,\n      model: screen,\n      router: router,\n      signals: signals,\n      mappings: router.mappings,\n      el: document.querySelector('.controller')\n    });\n\n    router.defaultSetup = options.setup || {\n      layers: [],\n      signals: [],\n      mappings: []\n    };\n  },\n\n  sendCommand: function(name, payload, callback) {\n    var worker = this.worker;\n    var message = {\n      command: name,\n      payload: payload\n    };\n\n    function makeListener(id, done) {\n      function eventListener(evt) {\n        if (evt.data.eventId !== id) return;\n        done(null, evt.data.payload);\n        worker.removeEventListener('message', eventListener);\n      }\n      return eventListener;\n    }\n\n    if (callback) {\n      message.eventId = auid();\n      worker.addEventListener('message', makeListener(message.eventId, callback));\n    }\n    worker.postMessage(message);\n  },\n\n\n  routes: {\n    '': 'loadSetup',\n    'setup/:setupId': 'loadSetup'\n  },\n\n  _sendBootstrap: function(setup, done) {\n    done = typeof done === 'function' ? done : function() { console.info('APP bootstraped'); };\n    this.once('app:broadcast:bootstrap', done);\n    this.sendCommand('bootstrap', {\n      layers: setup.layers,\n      signals: setup.signals,\n      mappings: setup.mappings\n    });\n  },\n\n  _defaultBootstrap: function() {\n    console.time();\n    var router = this;\n    this._sendBootstrap(this.defaultSetup, function() {\n      console.timeEnd();\n      router.view._setupEditor();\n    });\n  },\n\n  loadSetup: function(setupId) {\n    console.info('loadSetup', setupId);\n    var router = this;\n\n    function done(err, setup) {\n      if (err || !setup || !setup.layers || !setup.signals || !setup.mappings) {\n        return router._defaultBootstrap();\n      }\n\n      console.time();\n      router._sendBootstrap(setup, function() {\n        console.timeEnd();\n        router.view._setupEditor();\n      });\n    }\n\n    if (!setupId) {\n      router._defaultBootstrap();\n    }\n    else if (setupId.indexOf('local-') === 0) {\n      router.loadLocal(setupId, done);\n    }\n    else {\n      router.loadGist(setupId, done);\n    }\n  },\n\n  loadLocal: function(localId, done) {\n    var localforageView = this.view.localforageView;\n    localforageView.loadLocal(localId, done);\n  },\n\n  loadGist: function(gistId, done) {\n    var gistView = this.view.gistView;\n    var same = gistView.gistId === gistId;\n    gistView.gistId = gistId;\n    if (!same) gistView._loadGist(done);\n  }\n});\n\n\n\n\nvar controllerSetup = VF._defaultSetup;\ncontrollerSetup.el = document.querySelector('.controller');\n\nvar vf = window.visualFiha = new AppRouter({\n  setup: controllerSetup\n});\nvf.history.start({\n  root: location.pathname,\n  pushState: false\n});\n\n\n\n// ---------------------------------------------------------------\n}, 'controller-deps');\n}, 'screen-state');\n}, 'layer-state');\n}, 'mapping-data');\n}, 'ampersand-view');\n}, 'ampersand-data');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./controller-app.js\n// module id = 643\n// module chunks = 2"],"sourceRoot":""}